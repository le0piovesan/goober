generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rider {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  image         String
  rides         Ride[]
  notifications Notification[]
}

model Driver {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  password       String
  image          String
  type           String         @default("Regular")
  onTrip         Boolean        @default(false)
  lastLocation   Location       @relation("DriverLastLocation", fields: [lastLocationId], references: [id])
  lastLocationId Int            @unique
  rides          Ride[]
  declinedRides  DeclinedRide[]
  notifications  Notification[]
}

model Ride {
  id              Int    @id @default(autoincrement())
  tripFee         Float
  distance        String
  originName      String
  destinationName String

  pickupLocation    Location @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  pickupLocationId  Int      @unique
  dropoffLocation   Location @relation("DropoffLocation", fields: [dropoffLocationId], references: [id])
  dropoffLocationId Int      @unique

  status   RideStatus @relation(fields: [statusId], references: [id])
  statusId Int

  driver   Driver? @relation(fields: [driverId], references: [id])
  driverId Int?

  rider   Rider @relation(fields: [riderId], references: [id])
  riderId Int

  declinedRides DeclinedRide[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  REQUESTED
  ONGOING
  CANCELED
  FINISHED
  EXPIRED
}

model RideStatus {
  id         Int       @id @default(autoincrement())
  current    Status    @default(REQUESTED)
  acceptedAt DateTime?
  finishedAt DateTime?
  rides      Ride[]
}

model Location {
  id                 Int     @id @default(autoincrement())
  latitude           Float   @default(0)
  longitude          Float   @default(0)
  driverLastLocation Driver? @relation("DriverLastLocation")
  pickupRide         Ride?   @relation("PickupLocation")
  dropoffRide        Ride?   @relation("DropoffLocation")
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())

  rider    Rider?  @relation(fields: [riderId], references: [id])
  riderId  Int?
  driver   Driver? @relation(fields: [driverId], references: [id])
  driverId Int?
  ride     Ride?   @relation(fields: [rideId], references: [id])
  rideId   Int?
}

model DeclinedRide {
  id       Int    @id @default(autoincrement())
  ride     Ride   @relation(fields: [rideId], references: [id])
  rideId   Int
  driver   Driver @relation(fields: [driverId], references: [id])
  driverId Int

  @@unique([rideId, driverId])
}
