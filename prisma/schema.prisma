generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rider {
  id               Int            @id @default(autoincrement())
  name             String
  email            String         @unique
  password         String
  image            String
  profileCompleted Boolean        @default(true)
  rides            Ride[]
  notifications    Notification[]
}

model Driver {
  id                Int       @id @default(autoincrement())
  name              String
  fullName          String?
  email             String    @unique
  password          String
  image             String
  SSN               String?   @unique
  dateOfBirth       DateTime?
  gender            String?
  type              String    @default("Regular")
  onTrip            Boolean   @default(false)
  profileCompleted  Boolean   @default(false)
  tutorialCompleted Boolean   @default(false)

  lastLocation   Location       @relation("DriverLastLocation", fields: [lastLocationId], references: [id])
  lastLocationId Int            @unique
  rides          Ride[]
  declinedRides  DeclinedRide[]
  notifications  Notification[]

  vehicle          Vehicle?        @relation("DriverVehicle", fields: [vehicleId], references: [id])
  vehicleId        Int?            @unique
  documents        Documents?      @relation("DriverDocuments", fields: [documentsId], references: [id])
  documentsId      Int?            @unique
  drivingHistory   DrivingHistory? @relation("DriverDrivingHistory", fields: [drivingHistoryId], references: [id])
  drivingHistoryId Int?            @unique
  bank             Bank?           @relation("DriverBank", fields: [bankId], references: [id])
  bankId           Int?            @unique
}

model Ride {
  id              Int    @id @default(autoincrement())
  tripFee         Float
  distance        String
  originName      String
  destinationName String
  type            String @default("Regular")

  pickupLocation    Location @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  pickupLocationId  Int      @unique
  dropoffLocation   Location @relation("DropoffLocation", fields: [dropoffLocationId], references: [id])
  dropoffLocationId Int      @unique

  status   RideStatus @relation(fields: [statusId], references: [id])
  statusId Int

  driver   Driver? @relation(fields: [driverId], references: [id])
  driverId Int?

  rider   Rider @relation(fields: [riderId], references: [id])
  riderId Int

  declinedRides DeclinedRide[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  REQUESTED
  ONGOING
  CANCELED
  FINISHED
  EXPIRED
}

model RideStatus {
  id         Int       @id @default(autoincrement())
  current    Status    @default(REQUESTED)
  acceptedAt DateTime?
  finishedAt DateTime?
  rides      Ride[]
}

model Location {
  id                 Int     @id @default(autoincrement())
  latitude           Float   @default(0)
  longitude          Float   @default(0)
  driverLastLocation Driver? @relation("DriverLastLocation")
  pickupRide         Ride?   @relation("PickupLocation")
  dropoffRide        Ride?   @relation("DropoffLocation")
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())

  rider    Rider?  @relation(fields: [riderId], references: [id])
  riderId  Int?
  driver   Driver? @relation(fields: [driverId], references: [id])
  driverId Int?
  ride     Ride?   @relation(fields: [rideId], references: [id])
  rideId   Int?
}

model DeclinedRide {
  id       Int    @id @default(autoincrement())
  ride     Ride   @relation(fields: [rideId], references: [id])
  rideId   Int
  driver   Driver @relation(fields: [driverId], references: [id])
  driverId Int

  @@unique([rideId, driverId])
}

model Vehicle {
  id            Int      @id @default(autoincrement())
  type          String
  licensePlate  String
  photos        String[]
  features      String[]
  driverVehicle Driver?  @relation("DriverVehicle")
}

model Documents {
  id                       Int      @id @default(autoincrement())
  license                  String
  insurance                String
  backgroundCheckDocuments String[]
  professionalCertificate  String?
  driverDocuments          Driver?  @relation("DriverDocuments")
}

model DrivingHistory {
  id                   Int      @id @default(autoincrement())
  experience           String
  referenceLetters     String[]
  driverDrivingHistory Driver?  @relation("DriverDrivingHistory")
}

model Bank {
  id            Int     @id @default(autoincrement())
  accountNumber String
  routingNumber String
  checkNumber   String
  bankName      String
  driverBank    Driver? @relation("DriverBank")
}

model Quiz {
  id            Int    @id @default(autoincrement())
  question      String
  answerA       String
  answerB       String
  answerC       String
  answerD       String
  answerE       String
  correctAnswer String
}
